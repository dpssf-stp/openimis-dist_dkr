version: "2.4"

services:
  db:
    container_name: ${PROJECT_NAME:-openimis}-db
    build:
      context: https://github.com/openimis/database_ms_sqlserver.git#${DB_BRANCH:-develop} 
      args:
        - ACCEPT_EULA=${ACCEPT_EULA}
        - SA_PASSWORD=${DB_PASSWORD}
    environment:
      - DB_USER_PASSWORD=${DB_PASSWORD}
      - SA_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - ACCEPT_EULA=${ACCEPT_EULA}
      - SQL_SCRIPT_URL="https://pipelines.actions.githubusercontent.com/serviceHosts/3ea2b581-1457-4ae0-88fa-ad20ed7009a9/_apis/pipelines/1/runs/294/signedartifactscontent?artifactName=sql-files&urlExpires=2023-02-24T13%3A29%3A04.8136802Z&urlSigningMethod=HMACV2&urlSignature=hMEpOGema%2B9rNH54kRZV9ti0ue7XujvIOo0ElxJQ2L0%3D"
    healthcheck:
      test: "bash /app/healthcheck.sh"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 100s
    networks:
      openimis-net:
    volumes:
      - database:/var/opt/mssql/data
    ports:
      - 1433:1433
  ## WARNING:
    ## exposing the database port outside the openimis-net network
    ## may lead to security issue (depending on your network topology)
    # ports:
    #  - 1433:1433
  backend:
    container_name: ${PROJECT_NAME:-openimis}-api
    image: ghcr.io/openimis/openimis-be:latest 
    command: start
    environment: &backend-env
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - SITE_ROOT=api
      - SITE_URL=${NEW_OPENIMIS_HOST}
      - CELERY_BROKER_URL=amqp://rabbitmq
    depends_on:  
      db:
        condition: service_healthy
    networks:
      openimis-net:

  gateway:
    container_name: ${PROJECT_NAME:-openimis}-frontend
    image: ghcr.io/openimis/openimis-fe:unified-docekr
    environment:
      - REACT_APP_API_URL=/api
      - NEW_OPENIMIS_HOST=${NEW_OPENIMIS_HOST}
      - OPENIMIS_CONF_JSON=${OPENIMIS_FE_CONF_JSON}
    networks:
      openimis-net:
    ports:
      - ${HTTP_PORT:-80}:80
      - ${HTTPS_PORT:-443}:443
    depends_on:
      - backend
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
  worker:
    container_name: ${PROJECT_NAME:-openimis}-worker
    image: ghcr.io/openimis/openimis-be:latest
    command: worker
    restart: always
    depends_on: 
      - backend
    environment: *backend-env
    networks:
      openimis-net:
  rabbitmq:
    container_name: ${PROJECT_NAME:-openimis}-rabbitmq
    image: rabbitmq:3-management
    restart: always
    networks:
      openimis-net:
  restapi:
    container_name: ${PROJECT_NAME:-openimis}-restapi
    build:
      context:  https://github.com/openimis/rest_api_c-sharp.git#${RESTAPI_BRANCH:-develop}
      args:
        BUILD-FLAVOUR: ${RESTAPI_BUILD_FLAVOUR:-Release}
    volumes:
      - ./conf/restapi:/app/config
      - ./logs:/app/log
    restart: always
    depends_on:  
      db:
        condition: service_healthy
    networks:
      openimis-net:
networks:
  openimis-net:
volumes:
  database: